import os
from random import randint

SIZE_BOARD: int = 6
#type (size) and number of ships on the board
NUMBER_OF_SHIPS: list = [3, 2, 2, 1, 1, 1, 1]

class Color:
    red: str = '\033[1;31m'
    green: str = '\033[1;32m'
    brown: str = '\033[2;33m'
    yellow: str = '\033[1;93m'
    blue: str = '\033[1;34m'
    fiolet: str = '\033[1;35m'
    biruz: str = '\033[0;36m'
    reset: str = '\033[0m'
    
def set_color(text: str, color: str) -> str:
    return color + text + Color.reset

# Constants used to represent elements on the board
CELL: str = set_color('~', Color.blue)
SHIP: str = set_color('#', Color.yellow)
ATTACK: str = set_color('X', Color.red)
MISS: str = set_color('Miss!', Color.fiolet)
SHIP_DESTROYED: str = set_color('Ship destroyed!', Color.red)
SHIP_ATTACK: str = set_color('Ship attack!', Color.brown)
DOT: str = set_color('o', Color.biruz)
USER_WIN: str = set_color('You win!', Color.green)
USER_LOSE: str = set_color('You lose!', Color.red)

class Dot:


    def __init__(self, x: int, y: int) -> None:
        self.x = x
        self.y = y
      
    def __eq__(self, other) -> bool:
        return self.x == other.x and self.y == other.y

    def __repr__(self) -> str:
        return f'({self.x}, {self.y})'


class BoardException(Exception):
    pass


class BoardOutException(BoardException):
    def __str__(self) -> str:
        return 'Attack without board!'

    
class BoardUsedException(BoardException):
    def __str__(self) -> str:
        return 'You already attack this cell!'

    
class BoardWrongShipException(BoardException):
    pass


class Ship:


    def __init__(self, bow: int, l: int, o: int) -> None:
        self.bow = bow
        self.l = l
        self.o = o
        self.lives = l

    @property
    def dots(self) -> list:
        ship_dots = []
        for i in range(self.l):
            cur_x = self.bow.x
            cur_y = self.bow.y

            if self.o == 0:
                cur_x += i

            elif self.o == 1:
                cur_y += i

            ship_dots.append(Dot(cur_x, cur_y))

        return ship_dots

    def shooten(self, shot: list) -> list:
        return shot in self.dots


class Board:


    def __init__(self, hid: bool = False, size: int = SIZE_BOARD) -> None:
        self.hid = hid
        self.size = size

        self.count = 0

        self.field = [[CELL]*size for _ in range(size)]

        self.busy = []
        self.ships = []

    def __str__(self) -> str:
        res = ''
        for i in range(SIZE_BOARD + 1):
            res += f'{i} | '

        for i, row in enumerate(self.field):
            res += f'\n{i+1})| ' + ' | '.join(row) + ' |'

            if self.hid:
                res = res.replace(SHIP, CELL)
        return res

    def out(self, d: int) -> bool:
        return not ((0 <= d.x < self.size) and (0 <= d.y < self.size))

    def contour(self, ship: list, verb: bool = False) -> None:
        near = [
            (-1, -1), (-1, 0), (-1, 1),
            (0, -1), (0, 0), (0, 1),
            (1, -1), (1, 0), (1, 1)
        ]

        for d in ship.dots:
            for dx, dy in near:
                cur = Dot(d.x + dx, d.y + dy)
                if not(self.out(cur)) and cur not in self.busy:
                    if verb:
                        self.field[cur.x][cur.y] = DOT
                    self.busy.append(cur)
    
    def add_ship(self, ship: list) -> None:
        for d in ship.dots:
            if self.out(d) or d in self.busy:
                raise BoardWrongShipException()
        for d in ship.dots:
            self.field[d.x][d.y] = SHIP
            self.busy.append(d)

        self.ships.append(ship)
        self.contour(ship)

    def shot(self, d: int) -> bool:
        if self.out(d):
            raise BoardOutException()

        if d in self.busy:
            raise BoardUsedException()

        self.busy.append(d)

        for ship in self.ships:
            if d in ship.dots:
                ship.lives -= 1
                self.field[d.x][d.y] = ATTACK
                if ship.lives == 0:
                    self.count += 1
                    self.contour(ship, verb = True)
                    print(SHIP_DESTROYED)
                    return False
                else:
                    print(SHIP_ATTACK)
                    return True

        self.field[d.x][d.y] = DOT
        print(MISS)
        return False

    def begin(self) -> None:
        self.busy = []

    def defeat(self) -> int:
        return self.count == len(self.ships)


class Player:
    
    
    def __init__(self, board: Board, enemy: int) -> None:
        self.board = board
        self.enemy = enemy

    def ask(self):
        raise NotImplementError()
    
    def move(self) -> str:
        while True:
            try:
                target = self.ask()
                repeat = self.enemy.shot(target)
                return repeat
            except BoardException as e:
                print(e)


class AI(Player):


    def ask(self) -> list:
        d = Dot(randint(0, 5), randint(0, 5))
        print(f'Computer turn: {d.x + 1} {d.y + 1}')
        return d

class User(Player):


    def ask(self) -> list:
        while True:
            cords = input('Your turn: ').split()

            if len(cords) != 2:
                print('Enter 2 coordinats!')
                continue

            x, y = cords

            if not(x.isdigit()) or not (y.isdigit()):
                print('Enter a numbers!')
                continue

            x, y = int(x), int(y)

            return Dot(x - 1, y - 1)
            

class Game:

    
    def __init__(self, size: int = SIZE_BOARD) -> None:
        self.size = size
        ply_b = self.random_board()
        com_b = self.random_board()
        com_b.hid = False

        self.ai = AI(com_b, ply_b)
        self.user = User(ply_b, com_b)
        
    def random_place(self) -> list:
        lens = NUMBER_OF_SHIPS
        board = Board(size = self.size)
        attempts = 0
        for l in lens:
            while True:
                attempts += 1
                if attempts > 2000:
                    return None
                ship = Ship(Dot(randint(0, self.size), randint(0, self.size)), l, randint(0, 1))
                try:
                    board.add_ship(ship)
                    break
                except BoardWrongShipException:
                    pass

        board.begin()

        return board

    def random_board(self) -> list:
        board = None
        while board is None:
            board = self.random_place()
        return board
    
    def print_boards(self) -> None:
        print('Your board:', self.user.board, sep='\n', end='\n')
        print()
        print('Computer board:', self.ai.board, sep='\n', end='\n')
        print()
    
    def play_game(self) -> None:
        num = 0
        while True:
            self.print_boards()

            if num % 2 == 0:
                repeat = self.user.move()
                self.print_boards()
            else:
                repeat = self.ai.move()
                self.print_boards()
 
            if repeat:
                num -= 1

            if self.ai.board.defeat():
                self.print_boards()
                print('-'*20, USER_WIN, end='\n')
                break

            if self.user.board.defeat():
                self.print_boards()
                print('-'*20, USER_LOSE, end='\n')
                break
            num += 1
            
            os.system('clear')

	

    def start(self) -> None:
        os.system('clear')
        self.play_game()

        
game = Game()
game.start()
